//
// Copyright 2020-2025 Exactpro (Exactpro Systems Limited)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: th2_grpc_lw_data_provider/lw_data_provider.proto

package th2_grpc_lw_data_provider

import (
	_ "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	th2_grpc_common "th2-grpc/th2_grpc_common"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeRelation int32

const (
	TimeRelation_NEXT     TimeRelation = 0
	TimeRelation_PREVIOUS TimeRelation = 1
)

// Enum value maps for TimeRelation.
var (
	TimeRelation_name = map[int32]string{
		0: "NEXT",
		1: "PREVIOUS",
	}
	TimeRelation_value = map[string]int32{
		"NEXT":     0,
		"PREVIOUS": 1,
	}
)

func (x TimeRelation) Enum() *TimeRelation {
	p := new(TimeRelation)
	*p = x
	return p
}

func (x TimeRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_enumTypes[0].Descriptor()
}

func (TimeRelation) Type() protoreflect.EnumType {
	return &file_th2_grpc_lw_data_provider_lw_data_provider_proto_enumTypes[0]
}

func (x TimeRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeRelation.Descriptor instead.
func (TimeRelation) EnumDescriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{0}
}

// The scope for events to request
type EventScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EventScope) Reset() {
	*x = EventScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventScope) ProtoMessage() {}

func (x *EventScope) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventScope.ProtoReflect.Descriptor instead.
func (*EventScope) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{0}
}

func (x *EventScope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BookId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the book to request data from
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BookId) Reset() {
	*x = BookId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookId) ProtoMessage() {}

func (x *BookId) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookId.ProtoReflect.Descriptor instead.
func (*BookId) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{1}
}

func (x *BookId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MessageGroupsSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp *timestamp.Timestamp                `protobuf:"bytes,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   *timestamp.Timestamp                `protobuf:"bytes,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	BookId         *BookId                             `protobuf:"bytes,7,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	MessageGroup   []*MessageGroupsSearchRequest_Group `protobuf:"bytes,3,rep,name=message_group,json=messageGroup,proto3" json:"message_group,omitempty"`
	// deprecated: grouped message batches are already sorted and haven't got overlapping
	//
	// Deprecated: Marked as deprecated in th2_grpc_lw_data_provider/lw_data_provider.proto.
	Sort *wrappers.BoolValue `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	// deprecated: use response_formats with only BASE_64 to achieve the same effect
	//
	// Deprecated: Marked as deprecated in th2_grpc_lw_data_provider/lw_data_provider.proto.
	RawOnly          bool                 `protobuf:"varint,5,opt,name=raw_only,json=rawOnly,proto3" json:"raw_only,omitempty"`
	KeepOpen         bool                 `protobuf:"varint,6,opt,name=keep_open,json=keepOpen,proto3" json:"keep_open,omitempty"`
	ResponseFormats  []string             `protobuf:"bytes,8,rep,name=response_formats,json=responseFormats,proto3" json:"response_formats,omitempty"`                                          // List of possible response formats (e.g. PARSED or BASE_64)
	Stream           []*MessageStream     `protobuf:"bytes,9,rep,name=stream,proto3" json:"stream,omitempty"`                                                                                   // Sets the stream names and directions to search in. Case-sensitive.
	SearchDirection  TimeRelation         `protobuf:"varint,10,opt,name=search_direction,json=searchDirection,proto3,enum=th2.data_provider.lw.TimeRelation" json:"search_direction,omitempty"` // Sets the lookup direction. Can be used for pagination. Set by default to NEXT.
	ResultCountLimit *wrappers.Int32Value `protobuf:"bytes,11,opt,name=result_count_limit,json=resultCountLimit,proto3" json:"result_count_limit,omitempty"`                                    // Sets the maximum amount of messages to return. By default it is absent (unlimited)
}

func (x *MessageGroupsSearchRequest) Reset() {
	*x = MessageGroupsSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageGroupsSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageGroupsSearchRequest) ProtoMessage() {}

func (x *MessageGroupsSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageGroupsSearchRequest.ProtoReflect.Descriptor instead.
func (*MessageGroupsSearchRequest) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{2}
}

func (x *MessageGroupsSearchRequest) GetStartTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *MessageGroupsSearchRequest) GetEndTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *MessageGroupsSearchRequest) GetBookId() *BookId {
	if x != nil {
		return x.BookId
	}
	return nil
}

func (x *MessageGroupsSearchRequest) GetMessageGroup() []*MessageGroupsSearchRequest_Group {
	if x != nil {
		return x.MessageGroup
	}
	return nil
}

// Deprecated: Marked as deprecated in th2_grpc_lw_data_provider/lw_data_provider.proto.
func (x *MessageGroupsSearchRequest) GetSort() *wrappers.BoolValue {
	if x != nil {
		return x.Sort
	}
	return nil
}

// Deprecated: Marked as deprecated in th2_grpc_lw_data_provider/lw_data_provider.proto.
func (x *MessageGroupsSearchRequest) GetRawOnly() bool {
	if x != nil {
		return x.RawOnly
	}
	return false
}

func (x *MessageGroupsSearchRequest) GetKeepOpen() bool {
	if x != nil {
		return x.KeepOpen
	}
	return false
}

func (x *MessageGroupsSearchRequest) GetResponseFormats() []string {
	if x != nil {
		return x.ResponseFormats
	}
	return nil
}

func (x *MessageGroupsSearchRequest) GetStream() []*MessageStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *MessageGroupsSearchRequest) GetSearchDirection() TimeRelation {
	if x != nil {
		return x.SearchDirection
	}
	return TimeRelation_NEXT
}

func (x *MessageGroupsSearchRequest) GetResultCountLimit() *wrappers.Int32Value {
	if x != nil {
		return x.ResultCountLimit
	}
	return nil
}

type MessageStreamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId *BookId `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
}

func (x *MessageStreamsRequest) Reset() {
	*x = MessageStreamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStreamsRequest) ProtoMessage() {}

func (x *MessageStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStreamsRequest.ProtoReflect.Descriptor instead.
func (*MessageStreamsRequest) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{3}
}

func (x *MessageStreamsRequest) GetBookId() *BookId {
	if x != nil {
		return x.BookId
	}
	return nil
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId           *th2_grpc_common.EventID     `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                     // Current event id
	ParentEventId     *th2_grpc_common.EventID     `protobuf:"bytes,2,opt,name=parent_event_id,json=parentEventId,proto3" json:"parent_event_id,omitempty"` // Event id of a parent event. It is absent for root event
	BatchId           *th2_grpc_common.EventID     `protobuf:"bytes,3,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`                     // Event id of a parent event. It is absent for root event
	IsBatched         bool                         `protobuf:"varint,4,opt,name=is_batched,json=isBatched,proto3" json:"is_batched,omitempty"`              // Flag indicating that the event is in batch
	StartTimestamp    *timestamp.Timestamp         `protobuf:"bytes,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp      *timestamp.Timestamp         `protobuf:"bytes,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"` // May be absent.
	Status            th2_grpc_common.EventStatus  `protobuf:"varint,7,opt,name=status,proto3,enum=EventStatus" json:"status,omitempty"`               // Aggregated status of current and children events which sync written.
	EventName         string                       `protobuf:"bytes,8,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	EventType         string                       `protobuf:"bytes,9,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                            // May be absent.
	Body              []byte                       `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`                                                      // May be absent.
	AttachedMessageId []*th2_grpc_common.MessageID `protobuf:"bytes,11,rep,name=attached_message_id,json=attachedMessageId,proto3" json:"attached_message_id,omitempty"` // ids of messages linked to this event
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{4}
}

func (x *EventResponse) GetEventId() *th2_grpc_common.EventID {
	if x != nil {
		return x.EventId
	}
	return nil
}

func (x *EventResponse) GetParentEventId() *th2_grpc_common.EventID {
	if x != nil {
		return x.ParentEventId
	}
	return nil
}

func (x *EventResponse) GetBatchId() *th2_grpc_common.EventID {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *EventResponse) GetIsBatched() bool {
	if x != nil {
		return x.IsBatched
	}
	return false
}

func (x *EventResponse) GetStartTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *EventResponse) GetEndTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *EventResponse) GetStatus() th2_grpc_common.EventStatus {
	if x != nil {
		return x.Status
	}
	return th2_grpc_common.EventStatus(0)
}

func (x *EventResponse) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *EventResponse) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *EventResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *EventResponse) GetAttachedMessageId() []*th2_grpc_common.MessageID {
	if x != nil {
		return x.AttachedMessageId
	}
	return nil
}

type MessageGroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *th2_grpc_common.Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Match   bool                     `protobuf:"varint,2,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *MessageGroupItem) Reset() {
	*x = MessageGroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageGroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageGroupItem) ProtoMessage() {}

func (x *MessageGroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageGroupItem.ProtoReflect.Descriptor instead.
func (*MessageGroupItem) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{5}
}

func (x *MessageGroupItem) GetMessage() *th2_grpc_common.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MessageGroupItem) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

type MessageGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *th2_grpc_common.MessageID `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // Message id should be unique in session
	// Deprecated: Marked as deprecated in th2_grpc_lw_data_provider/lw_data_provider.proto.
	Timestamp         *timestamp.Timestamp       `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                                                                                  // Message creation timestamp. Deprecated. Moved to MessageID
	MessageProperties map[string]string          `protobuf:"bytes,6,rep,name=message_properties,json=messageProperties,proto3" json:"message_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Additional properties for the source raw message
	BodyRaw           []byte                     `protobuf:"bytes,3,opt,name=body_raw,json=bodyRaw,proto3" json:"body_raw,omitempty"`
	AttachedEventId   []*th2_grpc_common.EventID `protobuf:"bytes,4,rep,name=attached_event_id,json=attachedEventId,proto3" json:"attached_event_id,omitempty"` // ids of events linked to this message group
	MessageItem       []*MessageGroupItem        `protobuf:"bytes,5,rep,name=message_item,json=messageItem,proto3" json:"message_item,omitempty"`               // May be absent.
}

func (x *MessageGroupResponse) Reset() {
	*x = MessageGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageGroupResponse) ProtoMessage() {}

func (x *MessageGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageGroupResponse.ProtoReflect.Descriptor instead.
func (*MessageGroupResponse) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{6}
}

func (x *MessageGroupResponse) GetMessageId() *th2_grpc_common.MessageID {
	if x != nil {
		return x.MessageId
	}
	return nil
}

// Deprecated: Marked as deprecated in th2_grpc_lw_data_provider/lw_data_provider.proto.
func (x *MessageGroupResponse) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessageGroupResponse) GetMessageProperties() map[string]string {
	if x != nil {
		return x.MessageProperties
	}
	return nil
}

func (x *MessageGroupResponse) GetBodyRaw() []byte {
	if x != nil {
		return x.BodyRaw
	}
	return nil
}

func (x *MessageGroupResponse) GetAttachedEventId() []*th2_grpc_common.EventID {
	if x != nil {
		return x.AttachedEventId
	}
	return nil
}

func (x *MessageGroupResponse) GetMessageItem() []*MessageGroupItem {
	if x != nil {
		return x.MessageItem
	}
	return nil
}

type FilterName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FilterName) Reset() {
	*x = FilterName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterName) ProtoMessage() {}

func (x *FilterName) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterName.ProtoReflect.Descriptor instead.
func (*FilterName) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{7}
}

func (x *FilterName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *FilterName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Negative bool        `protobuf:"varint,2,opt,name=negative,proto3" json:"negative,omitempty"`
	Value    []string    `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	Conjunct bool        `protobuf:"varint,4,opt,name=conjunct,proto3" json:"conjunct,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{8}
}

func (x *Filter) GetName() *FilterName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Filter) GetNegative() bool {
	if x != nil {
		return x.Negative
	}
	return false
}

func (x *Filter) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Filter) GetConjunct() bool {
	if x != nil {
		return x.Conjunct
	}
	return false
}

type EventSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp   *timestamp.Timestamp     `protobuf:"bytes,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`                                            // unix timestamp - Sets the search starting point. One of the 'start_timestamp' or 'resume_from_id' must not absent
	EndTimestamp     *timestamp.Timestamp     `protobuf:"bytes,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`                                                  // unix timestamp - Sets the timestamp to which the search will be performed, starting with 'start_timestamp'. When 'search_direction' is previous, end_timestamp must be less than start_timestamp. By default it is absent (the search is carried out endlessly into the past or into the future).
	ParentEvent      *th2_grpc_common.EventID `protobuf:"bytes,3,opt,name=parent_event,json=parentEvent,proto3" json:"parent_event,omitempty"`                                                     // Match events to the specified parent. Only the immediate children of the specified event will be returned.
	SearchDirection  TimeRelation             `protobuf:"varint,4,opt,name=search_direction,json=searchDirection,proto3,enum=th2.data_provider.lw.TimeRelation" json:"search_direction,omitempty"` // Sets the lookup direction. Can be used for pagination. Set by default to NEXT.
	ResultCountLimit *wrappers.Int32Value     `protobuf:"bytes,5,opt,name=result_count_limit,json=resultCountLimit,proto3" json:"result_count_limit,omitempty"`                                    // Sets the maximum amount of events to return. By default it is absent (unlimited).
	Filter           []*Filter                `protobuf:"bytes,6,rep,name=filter,proto3" json:"filter,omitempty"`                                                                                  // List of event search filters. (See 'search/sse/events' HTTP method https://github.com/th2-net/th2-rpt-data-provider)
	BookId           *BookId                  `protobuf:"bytes,7,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	Scope            *EventScope              `protobuf:"bytes,8,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *EventSearchRequest) Reset() {
	*x = EventSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSearchRequest) ProtoMessage() {}

func (x *EventSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSearchRequest.ProtoReflect.Descriptor instead.
func (*EventSearchRequest) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{9}
}

func (x *EventSearchRequest) GetStartTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *EventSearchRequest) GetEndTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *EventSearchRequest) GetParentEvent() *th2_grpc_common.EventID {
	if x != nil {
		return x.ParentEvent
	}
	return nil
}

func (x *EventSearchRequest) GetSearchDirection() TimeRelation {
	if x != nil {
		return x.SearchDirection
	}
	return TimeRelation_NEXT
}

func (x *EventSearchRequest) GetResultCountLimit() *wrappers.Int32Value {
	if x != nil {
		return x.ResultCountLimit
	}
	return nil
}

func (x *EventSearchRequest) GetFilter() []*Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EventSearchRequest) GetBookId() *BookId {
	if x != nil {
		return x.BookId
	}
	return nil
}

func (x *EventSearchRequest) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type EventSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*EventSearchResponse_Event
	Data isEventSearchResponse_Data `protobuf_oneof:"data"`
}

func (x *EventSearchResponse) Reset() {
	*x = EventSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSearchResponse) ProtoMessage() {}

func (x *EventSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSearchResponse.ProtoReflect.Descriptor instead.
func (*EventSearchResponse) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{10}
}

func (m *EventSearchResponse) GetData() isEventSearchResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *EventSearchResponse) GetEvent() *EventResponse {
	if x, ok := x.GetData().(*EventSearchResponse_Event); ok {
		return x.Event
	}
	return nil
}

type isEventSearchResponse_Data interface {
	isEventSearchResponse_Data()
}

type EventSearchResponse_Event struct {
	Event *EventResponse `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

func (*EventSearchResponse_Event) isEventSearchResponse_Data() {}

type MessageSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp   *timestamp.Timestamp    `protobuf:"bytes,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`                                            // unix timestamp - Sets the search starting point. One of the 'start_timestamp' or 'resume_from_id' or 'message_id' must not absent
	EndTimestamp     *timestamp.Timestamp    `protobuf:"bytes,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`                                                  // unix timestamp - Sets the timestamp to which the search will be performed, starting with 'start_timestamp'. When search_direction is 'previous', 'end_timestamp' must be less than 'start_timestamp'. By default it is absent (the search is carried out endlessly into the past or into the future).
	SearchDirection  TimeRelation            `protobuf:"varint,3,opt,name=search_direction,json=searchDirection,proto3,enum=th2.data_provider.lw.TimeRelation" json:"search_direction,omitempty"` // Sets the lookup direction. Can be used for pagination. Set by default to NEXT.
	ResultCountLimit *wrappers.Int32Value    `protobuf:"bytes,4,opt,name=result_count_limit,json=resultCountLimit,proto3" json:"result_count_limit,omitempty"`                                    // Sets the maximum amount of messages to return. By default it is absent (unlimited)
	Stream           []*MessageStream        `protobuf:"bytes,5,rep,name=stream,proto3" json:"stream,omitempty"`                                                                                  // Sets the stream names and directions to search in. Case-sensitive. Required.
	KeepOpen         *wrappers.BoolValue     `protobuf:"bytes,6,opt,name=keep_open,json=keepOpen,proto3" json:"keep_open,omitempty"`                                                              //  If the search has reached the current moment, it is necessary to wait further for the appearance of new data. Set by default to false.
	StreamPointer    []*MessageStreamPointer `protobuf:"bytes,7,rep,name=stream_pointer,json=streamPointer,proto3" json:"stream_pointer,omitempty"`                                               // List of stream pointers to restore the search from. start_timestamp will be ignored if this parameter is specified. By default it is absent.
	ResponseFormats  []string                `protobuf:"bytes,8,rep,name=response_formats,json=responseFormats,proto3" json:"response_formats,omitempty"`                                         // List of possible response formats (e.g. PARSED or BASE_64)
	BookId           *BookId                 `protobuf:"bytes,9,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
}

func (x *MessageSearchRequest) Reset() {
	*x = MessageSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSearchRequest) ProtoMessage() {}

func (x *MessageSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSearchRequest.ProtoReflect.Descriptor instead.
func (*MessageSearchRequest) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{11}
}

func (x *MessageSearchRequest) GetStartTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *MessageSearchRequest) GetEndTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *MessageSearchRequest) GetSearchDirection() TimeRelation {
	if x != nil {
		return x.SearchDirection
	}
	return TimeRelation_NEXT
}

func (x *MessageSearchRequest) GetResultCountLimit() *wrappers.Int32Value {
	if x != nil {
		return x.ResultCountLimit
	}
	return nil
}

func (x *MessageSearchRequest) GetStream() []*MessageStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *MessageSearchRequest) GetKeepOpen() *wrappers.BoolValue {
	if x != nil {
		return x.KeepOpen
	}
	return nil
}

func (x *MessageSearchRequest) GetStreamPointer() []*MessageStreamPointer {
	if x != nil {
		return x.StreamPointer
	}
	return nil
}

func (x *MessageSearchRequest) GetResponseFormats() []string {
	if x != nil {
		return x.ResponseFormats
	}
	return nil
}

func (x *MessageSearchRequest) GetBookId() *BookId {
	if x != nil {
		return x.BookId
	}
	return nil
}

type MessageSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*MessageSearchResponse_Message
	//	*MessageSearchResponse_MessageStreamPointers
	Data isMessageSearchResponse_Data `protobuf_oneof:"data"`
}

func (x *MessageSearchResponse) Reset() {
	*x = MessageSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSearchResponse) ProtoMessage() {}

func (x *MessageSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSearchResponse.ProtoReflect.Descriptor instead.
func (*MessageSearchResponse) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{12}
}

func (m *MessageSearchResponse) GetData() isMessageSearchResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *MessageSearchResponse) GetMessage() *MessageGroupResponse {
	if x, ok := x.GetData().(*MessageSearchResponse_Message); ok {
		return x.Message
	}
	return nil
}

func (x *MessageSearchResponse) GetMessageStreamPointers() *MessageStreamPointers {
	if x, ok := x.GetData().(*MessageSearchResponse_MessageStreamPointers); ok {
		return x.MessageStreamPointers
	}
	return nil
}

type isMessageSearchResponse_Data interface {
	isMessageSearchResponse_Data()
}

type MessageSearchResponse_Message struct {
	Message *MessageGroupResponse `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type MessageSearchResponse_MessageStreamPointers struct {
	MessageStreamPointers *MessageStreamPointers `protobuf:"bytes,2,opt,name=message_stream_pointers,json=messageStreamPointers,proto3,oneof"`
}

func (*MessageSearchResponse_Message) isMessageSearchResponse_Data() {}

func (*MessageSearchResponse_MessageStreamPointers) isMessageSearchResponse_Data() {}

type MessageStreamPointers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageStreamPointer []*MessageStreamPointer `protobuf:"bytes,1,rep,name=message_stream_pointer,json=messageStreamPointer,proto3" json:"message_stream_pointer,omitempty"`
}

func (x *MessageStreamPointers) Reset() {
	*x = MessageStreamPointers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStreamPointers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStreamPointers) ProtoMessage() {}

func (x *MessageStreamPointers) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStreamPointers.ProtoReflect.Descriptor instead.
func (*MessageStreamPointers) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{13}
}

func (x *MessageStreamPointers) GetMessageStreamPointer() []*MessageStreamPointer {
	if x != nil {
		return x.MessageStreamPointer
	}
	return nil
}

// This object contains the data of the last message in the stream on which
// the search has stopped, it is necessary to continue the search from the same point
type MessageStreamPointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageStream *MessageStream             `protobuf:"bytes,1,opt,name=message_stream,json=messageStream,proto3" json:"message_stream,omitempty"`
	LastId        *th2_grpc_common.MessageID `protobuf:"bytes,2,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"` // Might be absent if the stream has no messages
}

func (x *MessageStreamPointer) Reset() {
	*x = MessageStreamPointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStreamPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStreamPointer) ProtoMessage() {}

func (x *MessageStreamPointer) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStreamPointer.ProtoReflect.Descriptor instead.
func (*MessageStreamPointer) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{14}
}

func (x *MessageStreamPointer) GetMessageStream() *MessageStream {
	if x != nil {
		return x.MessageStream
	}
	return nil
}

func (x *MessageStreamPointer) GetLastId() *th2_grpc_common.MessageID {
	if x != nil {
		return x.LastId
	}
	return nil
}

type MessageStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                           // Case sensitive. Required.
	Direction th2_grpc_common.Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=Direction" json:"direction,omitempty"` // Required.
}

func (x *MessageStream) Reset() {
	*x = MessageStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStream) ProtoMessage() {}

func (x *MessageStream) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStream.ProtoReflect.Descriptor instead.
func (*MessageStream) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{15}
}

func (x *MessageStream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageStream) GetDirection() th2_grpc_common.Direction {
	if x != nil {
		return x.Direction
	}
	return th2_grpc_common.Direction(0)
}

type MessageStreamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageStream []*MessageStream `protobuf:"bytes,1,rep,name=message_stream,json=messageStream,proto3" json:"message_stream,omitempty"`
}

func (x *MessageStreamsResponse) Reset() {
	*x = MessageStreamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStreamsResponse) ProtoMessage() {}

func (x *MessageStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStreamsResponse.ProtoReflect.Descriptor instead.
func (*MessageStreamsResponse) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{16}
}

func (x *MessageStreamsResponse) GetMessageStream() []*MessageStream {
	if x != nil {
		return x.MessageStream
	}
	return nil
}

type BooksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BooksRequest) Reset() {
	*x = BooksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooksRequest) ProtoMessage() {}

func (x *BooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooksRequest.ProtoReflect.Descriptor instead.
func (*BooksRequest) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{17}
}

type BooksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookIds []*BookId `protobuf:"bytes,1,rep,name=book_ids,json=bookIds,proto3" json:"book_ids,omitempty"`
}

func (x *BooksResponse) Reset() {
	*x = BooksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooksResponse) ProtoMessage() {}

func (x *BooksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooksResponse.ProtoReflect.Descriptor instead.
func (*BooksResponse) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{18}
}

func (x *BooksResponse) GetBookIds() []*BookId {
	if x != nil {
		return x.BookIds
	}
	return nil
}

type PageInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId         *BookId              `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	StartTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	ResultLimit    *wrappers.Int32Value `protobuf:"bytes,4,opt,name=result_limit,json=resultLimit,proto3" json:"result_limit,omitempty"`
}

func (x *PageInfoRequest) Reset() {
	*x = PageInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfoRequest) ProtoMessage() {}

func (x *PageInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfoRequest.ProtoReflect.Descriptor instead.
func (*PageInfoRequest) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{19}
}

func (x *PageInfoRequest) GetBookId() *BookId {
	if x != nil {
		return x.BookId
	}
	return nil
}

func (x *PageInfoRequest) GetStartTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *PageInfoRequest) GetEndTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *PageInfoRequest) GetResultLimit() *wrappers.Int32Value {
	if x != nil {
		return x.ResultLimit
	}
	return nil
}

type PageInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *PageId               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment *wrappers.StringValue `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Started *timestamp.Timestamp  `protobuf:"bytes,3,opt,name=started,proto3" json:"started,omitempty"`
	Ended   *timestamp.Timestamp  `protobuf:"bytes,4,opt,name=ended,proto3" json:"ended,omitempty"`
	Updated *timestamp.Timestamp  `protobuf:"bytes,5,opt,name=updated,proto3" json:"updated,omitempty"`
	Removed *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (x *PageInfoResponse) Reset() {
	*x = PageInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfoResponse) ProtoMessage() {}

func (x *PageInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfoResponse.ProtoReflect.Descriptor instead.
func (*PageInfoResponse) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{20}
}

func (x *PageInfoResponse) GetId() *PageId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PageInfoResponse) GetComment() *wrappers.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *PageInfoResponse) GetStarted() *timestamp.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *PageInfoResponse) GetEnded() *timestamp.Timestamp {
	if x != nil {
		return x.Ended
	}
	return nil
}

func (x *PageInfoResponse) GetUpdated() *timestamp.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *PageInfoResponse) GetRemoved() *timestamp.Timestamp {
	if x != nil {
		return x.Removed
	}
	return nil
}

type PageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId *BookId `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PageId) Reset() {
	*x = PageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageId) ProtoMessage() {}

func (x *PageId) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageId.ProtoReflect.Descriptor instead.
func (*PageId) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{21}
}

func (x *PageId) GetBookId() *BookId {
	if x != nil {
		return x.BookId
	}
	return nil
}

func (x *PageId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MessageGroupsSearchRequest_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MessageGroupsSearchRequest_Group) Reset() {
	*x = MessageGroupsSearchRequest_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageGroupsSearchRequest_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageGroupsSearchRequest_Group) ProtoMessage() {}

func (x *MessageGroupsSearchRequest_Group) ProtoReflect() protoreflect.Message {
	mi := &file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageGroupsSearchRequest_Group.ProtoReflect.Descriptor instead.
func (*MessageGroupsSearchRequest_Group) Descriptor() ([]byte, []int) {
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP(), []int{2, 0}
}

func (x *MessageGroupsSearchRequest_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_th2_grpc_lw_data_provider_lw_data_provider_proto protoreflect.FileDescriptor

var file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDesc = []byte{
	0x0a, 0x30, 0x74, 0x68, 0x32, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x77, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6c, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x1a, 0x1c, 0x74, 0x68, 0x32, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x20, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x06, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xc5, 0x05, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x5b,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x1d, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x72, 0x61, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x1b, 0x0a,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x15, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x49, 0x64, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22, 0xe4, 0x03, 0x0a, 0x0d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3a, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x11,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x4c, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22,
	0xd3, 0x03, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x70, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x52, 0x61, 0x77, 0x12, 0x34,
	0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x68, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c,
	0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a,
	0x44, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x22, 0x86, 0x04, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x68, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c,
	0x77, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c,
	0x77, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x52,
	0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0x5a, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe1, 0x04, 0x0a, 0x14,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x37, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22,
	0xce, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x68, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c,
	0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x65, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x79, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x68, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x14,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x23, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6c,
	0x61, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x0e, 0x0a, 0x0c, 0x42, 0x6f,
	0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x0d, 0x42, 0x6f,
	0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcc, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x62,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x26, 0x0a, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x58,
	0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x10,
	0x01, 0x32, 0x80, 0x06, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x08,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x23, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x1a, 0x2a, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x65, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x68, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c,
	0x77, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x30,
	0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x22, 0x2e, 0x74, 0x68,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x6c, 0x77, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x68, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c,
	0x77, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x42, 0x4d, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x70, 0x72, 0x6f, 0x2e, 0x74, 0x68, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6c, 0x77, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x50, 0x01, 0x5a,
	0x22, 0x74, 0x68, 0x32, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x68, 0x32, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x6c, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescOnce sync.Once
	file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescData = file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDesc
)

func file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescGZIP() []byte {
	file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescOnce.Do(func() {
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescData = protoimpl.X.CompressGZIP(file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescData)
	})
	return file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDescData
}

var file_th2_grpc_lw_data_provider_lw_data_provider_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_th2_grpc_lw_data_provider_lw_data_provider_proto_goTypes = []interface{}{
	(TimeRelation)(0),                        // 0: th2.data_provider.lw.TimeRelation
	(*EventScope)(nil),                       // 1: th2.data_provider.lw.EventScope
	(*BookId)(nil),                           // 2: th2.data_provider.lw.BookId
	(*MessageGroupsSearchRequest)(nil),       // 3: th2.data_provider.lw.MessageGroupsSearchRequest
	(*MessageStreamsRequest)(nil),            // 4: th2.data_provider.lw.MessageStreamsRequest
	(*EventResponse)(nil),                    // 5: th2.data_provider.lw.EventResponse
	(*MessageGroupItem)(nil),                 // 6: th2.data_provider.lw.MessageGroupItem
	(*MessageGroupResponse)(nil),             // 7: th2.data_provider.lw.MessageGroupResponse
	(*FilterName)(nil),                       // 8: th2.data_provider.lw.FilterName
	(*Filter)(nil),                           // 9: th2.data_provider.lw.Filter
	(*EventSearchRequest)(nil),               // 10: th2.data_provider.lw.EventSearchRequest
	(*EventSearchResponse)(nil),              // 11: th2.data_provider.lw.EventSearchResponse
	(*MessageSearchRequest)(nil),             // 12: th2.data_provider.lw.MessageSearchRequest
	(*MessageSearchResponse)(nil),            // 13: th2.data_provider.lw.MessageSearchResponse
	(*MessageStreamPointers)(nil),            // 14: th2.data_provider.lw.MessageStreamPointers
	(*MessageStreamPointer)(nil),             // 15: th2.data_provider.lw.MessageStreamPointer
	(*MessageStream)(nil),                    // 16: th2.data_provider.lw.MessageStream
	(*MessageStreamsResponse)(nil),           // 17: th2.data_provider.lw.MessageStreamsResponse
	(*BooksRequest)(nil),                     // 18: th2.data_provider.lw.BooksRequest
	(*BooksResponse)(nil),                    // 19: th2.data_provider.lw.BooksResponse
	(*PageInfoRequest)(nil),                  // 20: th2.data_provider.lw.PageInfoRequest
	(*PageInfoResponse)(nil),                 // 21: th2.data_provider.lw.PageInfoResponse
	(*PageId)(nil),                           // 22: th2.data_provider.lw.PageId
	(*MessageGroupsSearchRequest_Group)(nil), // 23: th2.data_provider.lw.MessageGroupsSearchRequest.Group
	nil,                                      // 24: th2.data_provider.lw.MessageGroupResponse.MessagePropertiesEntry
	(*timestamp.Timestamp)(nil),              // 25: google.protobuf.Timestamp
	(*wrappers.BoolValue)(nil),               // 26: google.protobuf.BoolValue
	(*wrappers.Int32Value)(nil),              // 27: google.protobuf.Int32Value
	(*th2_grpc_common.EventID)(nil),          // 28: EventID
	(th2_grpc_common.EventStatus)(0),         // 29: EventStatus
	(*th2_grpc_common.MessageID)(nil),        // 30: MessageID
	(*th2_grpc_common.Message)(nil),          // 31: Message
	(th2_grpc_common.Direction)(0),           // 32: Direction
	(*wrappers.StringValue)(nil),             // 33: google.protobuf.StringValue
}
var file_th2_grpc_lw_data_provider_lw_data_provider_proto_depIdxs = []int32{
	25, // 0: th2.data_provider.lw.MessageGroupsSearchRequest.start_timestamp:type_name -> google.protobuf.Timestamp
	25, // 1: th2.data_provider.lw.MessageGroupsSearchRequest.end_timestamp:type_name -> google.protobuf.Timestamp
	2,  // 2: th2.data_provider.lw.MessageGroupsSearchRequest.book_id:type_name -> th2.data_provider.lw.BookId
	23, // 3: th2.data_provider.lw.MessageGroupsSearchRequest.message_group:type_name -> th2.data_provider.lw.MessageGroupsSearchRequest.Group
	26, // 4: th2.data_provider.lw.MessageGroupsSearchRequest.sort:type_name -> google.protobuf.BoolValue
	16, // 5: th2.data_provider.lw.MessageGroupsSearchRequest.stream:type_name -> th2.data_provider.lw.MessageStream
	0,  // 6: th2.data_provider.lw.MessageGroupsSearchRequest.search_direction:type_name -> th2.data_provider.lw.TimeRelation
	27, // 7: th2.data_provider.lw.MessageGroupsSearchRequest.result_count_limit:type_name -> google.protobuf.Int32Value
	2,  // 8: th2.data_provider.lw.MessageStreamsRequest.book_id:type_name -> th2.data_provider.lw.BookId
	28, // 9: th2.data_provider.lw.EventResponse.event_id:type_name -> EventID
	28, // 10: th2.data_provider.lw.EventResponse.parent_event_id:type_name -> EventID
	28, // 11: th2.data_provider.lw.EventResponse.batch_id:type_name -> EventID
	25, // 12: th2.data_provider.lw.EventResponse.start_timestamp:type_name -> google.protobuf.Timestamp
	25, // 13: th2.data_provider.lw.EventResponse.end_timestamp:type_name -> google.protobuf.Timestamp
	29, // 14: th2.data_provider.lw.EventResponse.status:type_name -> EventStatus
	30, // 15: th2.data_provider.lw.EventResponse.attached_message_id:type_name -> MessageID
	31, // 16: th2.data_provider.lw.MessageGroupItem.message:type_name -> Message
	30, // 17: th2.data_provider.lw.MessageGroupResponse.message_id:type_name -> MessageID
	25, // 18: th2.data_provider.lw.MessageGroupResponse.timestamp:type_name -> google.protobuf.Timestamp
	24, // 19: th2.data_provider.lw.MessageGroupResponse.message_properties:type_name -> th2.data_provider.lw.MessageGroupResponse.MessagePropertiesEntry
	28, // 20: th2.data_provider.lw.MessageGroupResponse.attached_event_id:type_name -> EventID
	6,  // 21: th2.data_provider.lw.MessageGroupResponse.message_item:type_name -> th2.data_provider.lw.MessageGroupItem
	8,  // 22: th2.data_provider.lw.Filter.name:type_name -> th2.data_provider.lw.FilterName
	25, // 23: th2.data_provider.lw.EventSearchRequest.start_timestamp:type_name -> google.protobuf.Timestamp
	25, // 24: th2.data_provider.lw.EventSearchRequest.end_timestamp:type_name -> google.protobuf.Timestamp
	28, // 25: th2.data_provider.lw.EventSearchRequest.parent_event:type_name -> EventID
	0,  // 26: th2.data_provider.lw.EventSearchRequest.search_direction:type_name -> th2.data_provider.lw.TimeRelation
	27, // 27: th2.data_provider.lw.EventSearchRequest.result_count_limit:type_name -> google.protobuf.Int32Value
	9,  // 28: th2.data_provider.lw.EventSearchRequest.filter:type_name -> th2.data_provider.lw.Filter
	2,  // 29: th2.data_provider.lw.EventSearchRequest.book_id:type_name -> th2.data_provider.lw.BookId
	1,  // 30: th2.data_provider.lw.EventSearchRequest.scope:type_name -> th2.data_provider.lw.EventScope
	5,  // 31: th2.data_provider.lw.EventSearchResponse.event:type_name -> th2.data_provider.lw.EventResponse
	25, // 32: th2.data_provider.lw.MessageSearchRequest.start_timestamp:type_name -> google.protobuf.Timestamp
	25, // 33: th2.data_provider.lw.MessageSearchRequest.end_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 34: th2.data_provider.lw.MessageSearchRequest.search_direction:type_name -> th2.data_provider.lw.TimeRelation
	27, // 35: th2.data_provider.lw.MessageSearchRequest.result_count_limit:type_name -> google.protobuf.Int32Value
	16, // 36: th2.data_provider.lw.MessageSearchRequest.stream:type_name -> th2.data_provider.lw.MessageStream
	26, // 37: th2.data_provider.lw.MessageSearchRequest.keep_open:type_name -> google.protobuf.BoolValue
	15, // 38: th2.data_provider.lw.MessageSearchRequest.stream_pointer:type_name -> th2.data_provider.lw.MessageStreamPointer
	2,  // 39: th2.data_provider.lw.MessageSearchRequest.book_id:type_name -> th2.data_provider.lw.BookId
	7,  // 40: th2.data_provider.lw.MessageSearchResponse.message:type_name -> th2.data_provider.lw.MessageGroupResponse
	14, // 41: th2.data_provider.lw.MessageSearchResponse.message_stream_pointers:type_name -> th2.data_provider.lw.MessageStreamPointers
	15, // 42: th2.data_provider.lw.MessageStreamPointers.message_stream_pointer:type_name -> th2.data_provider.lw.MessageStreamPointer
	16, // 43: th2.data_provider.lw.MessageStreamPointer.message_stream:type_name -> th2.data_provider.lw.MessageStream
	30, // 44: th2.data_provider.lw.MessageStreamPointer.last_id:type_name -> MessageID
	32, // 45: th2.data_provider.lw.MessageStream.direction:type_name -> Direction
	16, // 46: th2.data_provider.lw.MessageStreamsResponse.message_stream:type_name -> th2.data_provider.lw.MessageStream
	2,  // 47: th2.data_provider.lw.BooksResponse.book_ids:type_name -> th2.data_provider.lw.BookId
	2,  // 48: th2.data_provider.lw.PageInfoRequest.book_id:type_name -> th2.data_provider.lw.BookId
	25, // 49: th2.data_provider.lw.PageInfoRequest.start_timestamp:type_name -> google.protobuf.Timestamp
	25, // 50: th2.data_provider.lw.PageInfoRequest.end_timestamp:type_name -> google.protobuf.Timestamp
	27, // 51: th2.data_provider.lw.PageInfoRequest.result_limit:type_name -> google.protobuf.Int32Value
	22, // 52: th2.data_provider.lw.PageInfoResponse.id:type_name -> th2.data_provider.lw.PageId
	33, // 53: th2.data_provider.lw.PageInfoResponse.comment:type_name -> google.protobuf.StringValue
	25, // 54: th2.data_provider.lw.PageInfoResponse.started:type_name -> google.protobuf.Timestamp
	25, // 55: th2.data_provider.lw.PageInfoResponse.ended:type_name -> google.protobuf.Timestamp
	25, // 56: th2.data_provider.lw.PageInfoResponse.updated:type_name -> google.protobuf.Timestamp
	25, // 57: th2.data_provider.lw.PageInfoResponse.removed:type_name -> google.protobuf.Timestamp
	2,  // 58: th2.data_provider.lw.PageId.book_id:type_name -> th2.data_provider.lw.BookId
	28, // 59: th2.data_provider.lw.DataProvider.GetEvent:input_type -> EventID
	30, // 60: th2.data_provider.lw.DataProvider.GetMessage:input_type -> MessageID
	4,  // 61: th2.data_provider.lw.DataProvider.GetMessageStreams:input_type -> th2.data_provider.lw.MessageStreamsRequest
	12, // 62: th2.data_provider.lw.DataProvider.SearchMessages:input_type -> th2.data_provider.lw.MessageSearchRequest
	10, // 63: th2.data_provider.lw.DataProvider.SearchEvents:input_type -> th2.data_provider.lw.EventSearchRequest
	3,  // 64: th2.data_provider.lw.DataProvider.SearchMessageGroups:input_type -> th2.data_provider.lw.MessageGroupsSearchRequest
	18, // 65: th2.data_provider.lw.DataProvider.GetBooks:input_type -> th2.data_provider.lw.BooksRequest
	20, // 66: th2.data_provider.lw.DataProvider.GetPageInfo:input_type -> th2.data_provider.lw.PageInfoRequest
	5,  // 67: th2.data_provider.lw.DataProvider.GetEvent:output_type -> th2.data_provider.lw.EventResponse
	7,  // 68: th2.data_provider.lw.DataProvider.GetMessage:output_type -> th2.data_provider.lw.MessageGroupResponse
	17, // 69: th2.data_provider.lw.DataProvider.GetMessageStreams:output_type -> th2.data_provider.lw.MessageStreamsResponse
	13, // 70: th2.data_provider.lw.DataProvider.SearchMessages:output_type -> th2.data_provider.lw.MessageSearchResponse
	11, // 71: th2.data_provider.lw.DataProvider.SearchEvents:output_type -> th2.data_provider.lw.EventSearchResponse
	13, // 72: th2.data_provider.lw.DataProvider.SearchMessageGroups:output_type -> th2.data_provider.lw.MessageSearchResponse
	19, // 73: th2.data_provider.lw.DataProvider.GetBooks:output_type -> th2.data_provider.lw.BooksResponse
	21, // 74: th2.data_provider.lw.DataProvider.GetPageInfo:output_type -> th2.data_provider.lw.PageInfoResponse
	67, // [67:75] is the sub-list for method output_type
	59, // [59:67] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_th2_grpc_lw_data_provider_lw_data_provider_proto_init() }
func file_th2_grpc_lw_data_provider_lw_data_provider_proto_init() {
	if File_th2_grpc_lw_data_provider_lw_data_provider_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageGroupsSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStreamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageGroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStreamPointers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStreamPointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStreamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageGroupsSearchRequest_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*EventSearchResponse_Event)(nil),
	}
	file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MessageSearchResponse_Message)(nil),
		(*MessageSearchResponse_MessageStreamPointers)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_th2_grpc_lw_data_provider_lw_data_provider_proto_goTypes,
		DependencyIndexes: file_th2_grpc_lw_data_provider_lw_data_provider_proto_depIdxs,
		EnumInfos:         file_th2_grpc_lw_data_provider_lw_data_provider_proto_enumTypes,
		MessageInfos:      file_th2_grpc_lw_data_provider_lw_data_provider_proto_msgTypes,
	}.Build()
	File_th2_grpc_lw_data_provider_lw_data_provider_proto = out.File
	file_th2_grpc_lw_data_provider_lw_data_provider_proto_rawDesc = nil
	file_th2_grpc_lw_data_provider_lw_data_provider_proto_goTypes = nil
	file_th2_grpc_lw_data_provider_lw_data_provider_proto_depIdxs = nil
}
