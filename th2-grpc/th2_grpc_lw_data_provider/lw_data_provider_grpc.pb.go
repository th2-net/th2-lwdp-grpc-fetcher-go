//
// Copyright 2020-2025 Exactpro (Exactpro Systems Limited)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: th2_grpc_lw_data_provider/lw_data_provider.proto

package th2_grpc_lw_data_provider

import (
	context "context"
	th2_grpc_common "github.com/th2-net/th2-grpc-common/src/main/proto/th2_grpc_common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataProvider_GetEvent_FullMethodName            = "/th2.data_provider.lw.DataProvider/GetEvent"
	DataProvider_GetMessage_FullMethodName          = "/th2.data_provider.lw.DataProvider/GetMessage"
	DataProvider_GetMessageStreams_FullMethodName   = "/th2.data_provider.lw.DataProvider/GetMessageStreams"
	DataProvider_SearchMessages_FullMethodName      = "/th2.data_provider.lw.DataProvider/SearchMessages"
	DataProvider_SearchEvents_FullMethodName        = "/th2.data_provider.lw.DataProvider/SearchEvents"
	DataProvider_SearchMessageGroups_FullMethodName = "/th2.data_provider.lw.DataProvider/SearchMessageGroups"
	DataProvider_GetBooks_FullMethodName            = "/th2.data_provider.lw.DataProvider/GetBooks"
	DataProvider_GetPageInfo_FullMethodName         = "/th2.data_provider.lw.DataProvider/GetPageInfo"
)

// DataProviderClient is the client API for DataProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProviderClient interface {
	// returns a single event with the specified id
	GetEvent(ctx context.Context, in *th2_grpc_common.EventID, opts ...grpc.CallOption) (*EventResponse, error)
	// returns a single message with the specified id
	GetMessage(ctx context.Context, in *th2_grpc_common.MessageID, opts ...grpc.CallOption) (*MessageGroupResponse, error)
	// returns a list of message stream names
	GetMessageStreams(ctx context.Context, in *MessageStreamsRequest, opts ...grpc.CallOption) (*MessageStreamsResponse, error)
	// creates a message stream that matches the filter.
	SearchMessages(ctx context.Context, in *MessageSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageSearchResponse], error)
	// creates an event or an event metadata stream that matches the filter.
	SearchEvents(ctx context.Context, in *EventSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventSearchResponse], error)
	// Searches for messages groups in specified timestamp
	SearchMessageGroups(ctx context.Context, in *MessageGroupsSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageSearchResponse], error)
	// Returns the set of books stored in cradle cache
	GetBooks(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (*BooksResponse, error)
	GetPageInfo(ctx context.Context, in *PageInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PageInfoResponse], error)
}

type dataProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProviderClient(cc grpc.ClientConnInterface) DataProviderClient {
	return &dataProviderClient{cc}
}

func (c *dataProviderClient) GetEvent(ctx context.Context, in *th2_grpc_common.EventID, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, DataProvider_GetEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) GetMessage(ctx context.Context, in *th2_grpc_common.MessageID, opts ...grpc.CallOption) (*MessageGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageGroupResponse)
	err := c.cc.Invoke(ctx, DataProvider_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) GetMessageStreams(ctx context.Context, in *MessageStreamsRequest, opts ...grpc.CallOption) (*MessageStreamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageStreamsResponse)
	err := c.cc.Invoke(ctx, DataProvider_GetMessageStreams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) SearchMessages(ctx context.Context, in *MessageSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageSearchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataProvider_ServiceDesc.Streams[0], DataProvider_SearchMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessageSearchRequest, MessageSearchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProvider_SearchMessagesClient = grpc.ServerStreamingClient[MessageSearchResponse]

func (c *dataProviderClient) SearchEvents(ctx context.Context, in *EventSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventSearchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataProvider_ServiceDesc.Streams[1], DataProvider_SearchEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventSearchRequest, EventSearchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProvider_SearchEventsClient = grpc.ServerStreamingClient[EventSearchResponse]

func (c *dataProviderClient) SearchMessageGroups(ctx context.Context, in *MessageGroupsSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageSearchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataProvider_ServiceDesc.Streams[2], DataProvider_SearchMessageGroups_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessageGroupsSearchRequest, MessageSearchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProvider_SearchMessageGroupsClient = grpc.ServerStreamingClient[MessageSearchResponse]

func (c *dataProviderClient) GetBooks(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (*BooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooksResponse)
	err := c.cc.Invoke(ctx, DataProvider_GetBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) GetPageInfo(ctx context.Context, in *PageInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PageInfoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataProvider_ServiceDesc.Streams[3], DataProvider_GetPageInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PageInfoRequest, PageInfoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProvider_GetPageInfoClient = grpc.ServerStreamingClient[PageInfoResponse]

// DataProviderServer is the server API for DataProvider service.
// All implementations must embed UnimplementedDataProviderServer
// for forward compatibility.
type DataProviderServer interface {
	// returns a single event with the specified id
	GetEvent(context.Context, *th2_grpc_common.EventID) (*EventResponse, error)
	// returns a single message with the specified id
	GetMessage(context.Context, *th2_grpc_common.MessageID) (*MessageGroupResponse, error)
	// returns a list of message stream names
	GetMessageStreams(context.Context, *MessageStreamsRequest) (*MessageStreamsResponse, error)
	// creates a message stream that matches the filter.
	SearchMessages(*MessageSearchRequest, grpc.ServerStreamingServer[MessageSearchResponse]) error
	// creates an event or an event metadata stream that matches the filter.
	SearchEvents(*EventSearchRequest, grpc.ServerStreamingServer[EventSearchResponse]) error
	// Searches for messages groups in specified timestamp
	SearchMessageGroups(*MessageGroupsSearchRequest, grpc.ServerStreamingServer[MessageSearchResponse]) error
	// Returns the set of books stored in cradle cache
	GetBooks(context.Context, *BooksRequest) (*BooksResponse, error)
	GetPageInfo(*PageInfoRequest, grpc.ServerStreamingServer[PageInfoResponse]) error
	mustEmbedUnimplementedDataProviderServer()
}

// UnimplementedDataProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataProviderServer struct{}

func (UnimplementedDataProviderServer) GetEvent(context.Context, *th2_grpc_common.EventID) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedDataProviderServer) GetMessage(context.Context, *th2_grpc_common.MessageID) (*MessageGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedDataProviderServer) GetMessageStreams(context.Context, *MessageStreamsRequest) (*MessageStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageStreams not implemented")
}
func (UnimplementedDataProviderServer) SearchMessages(*MessageSearchRequest, grpc.ServerStreamingServer[MessageSearchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SearchMessages not implemented")
}
func (UnimplementedDataProviderServer) SearchEvents(*EventSearchRequest, grpc.ServerStreamingServer[EventSearchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}
func (UnimplementedDataProviderServer) SearchMessageGroups(*MessageGroupsSearchRequest, grpc.ServerStreamingServer[MessageSearchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SearchMessageGroups not implemented")
}
func (UnimplementedDataProviderServer) GetBooks(context.Context, *BooksRequest) (*BooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedDataProviderServer) GetPageInfo(*PageInfoRequest, grpc.ServerStreamingServer[PageInfoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetPageInfo not implemented")
}
func (UnimplementedDataProviderServer) mustEmbedUnimplementedDataProviderServer() {}
func (UnimplementedDataProviderServer) testEmbeddedByValue()                      {}

// UnsafeDataProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProviderServer will
// result in compilation errors.
type UnsafeDataProviderServer interface {
	mustEmbedUnimplementedDataProviderServer()
}

func RegisterDataProviderServer(s grpc.ServiceRegistrar, srv DataProviderServer) {
	// If the following call pancis, it indicates UnimplementedDataProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataProvider_ServiceDesc, srv)
}

func _DataProvider_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(th2_grpc_common.EventID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProvider_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).GetEvent(ctx, req.(*th2_grpc_common.EventID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(th2_grpc_common.MessageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProvider_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).GetMessage(ctx, req.(*th2_grpc_common.MessageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_GetMessageStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).GetMessageStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProvider_GetMessageStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).GetMessageStreams(ctx, req.(*MessageStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_SearchMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataProviderServer).SearchMessages(m, &grpc.GenericServerStream[MessageSearchRequest, MessageSearchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProvider_SearchMessagesServer = grpc.ServerStreamingServer[MessageSearchResponse]

func _DataProvider_SearchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataProviderServer).SearchEvents(m, &grpc.GenericServerStream[EventSearchRequest, EventSearchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProvider_SearchEventsServer = grpc.ServerStreamingServer[EventSearchResponse]

func _DataProvider_SearchMessageGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageGroupsSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataProviderServer).SearchMessageGroups(m, &grpc.GenericServerStream[MessageGroupsSearchRequest, MessageSearchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProvider_SearchMessageGroupsServer = grpc.ServerStreamingServer[MessageSearchResponse]

func _DataProvider_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProvider_GetBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).GetBooks(ctx, req.(*BooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_GetPageInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PageInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataProviderServer).GetPageInfo(m, &grpc.GenericServerStream[PageInfoRequest, PageInfoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProvider_GetPageInfoServer = grpc.ServerStreamingServer[PageInfoResponse]

// DataProvider_ServiceDesc is the grpc.ServiceDesc for DataProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "th2.data_provider.lw.DataProvider",
	HandlerType: (*DataProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvent",
			Handler:    _DataProvider_GetEvent_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _DataProvider_GetMessage_Handler,
		},
		{
			MethodName: "GetMessageStreams",
			Handler:    _DataProvider_GetMessageStreams_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _DataProvider_GetBooks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchMessages",
			Handler:       _DataProvider_SearchMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchEvents",
			Handler:       _DataProvider_SearchEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchMessageGroups",
			Handler:       _DataProvider_SearchMessageGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPageInfo",
			Handler:       _DataProvider_GetPageInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "th2_grpc_lw_data_provider/lw_data_provider.proto",
}
