//
// Copyright 2022-2025 Exactpro (Exactpro Systems Limited)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: th2_grpc_lw_data_provider/queue_data_provider.proto

package th2_grpc_lw_data_provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueueDataProvider_SearchMessageGroups_FullMethodName = "/th2.data_provider.lw.QueueDataProvider/SearchMessageGroups"
	QueueDataProvider_SearchEvents_FullMethodName        = "/th2.data_provider.lw.QueueDataProvider/SearchEvents"
)

// QueueDataProviderClient is the client API for QueueDataProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Service is used to request messages from DB and sent them to specified Queue
type QueueDataProviderClient interface {
	// The messages are return within group batches
	SearchMessageGroups(ctx context.Context, in *MessageGroupsQueueSearchRequest, opts ...grpc.CallOption) (*MessageLoadedStatistic, error)
	// Requesting events with the specified interval and sends them to queue
	SearchEvents(ctx context.Context, in *EventQueueSearchRequest, opts ...grpc.CallOption) (*EventLoadedStatistic, error)
}

type queueDataProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueDataProviderClient(cc grpc.ClientConnInterface) QueueDataProviderClient {
	return &queueDataProviderClient{cc}
}

func (c *queueDataProviderClient) SearchMessageGroups(ctx context.Context, in *MessageGroupsQueueSearchRequest, opts ...grpc.CallOption) (*MessageLoadedStatistic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageLoadedStatistic)
	err := c.cc.Invoke(ctx, QueueDataProvider_SearchMessageGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueDataProviderClient) SearchEvents(ctx context.Context, in *EventQueueSearchRequest, opts ...grpc.CallOption) (*EventLoadedStatistic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventLoadedStatistic)
	err := c.cc.Invoke(ctx, QueueDataProvider_SearchEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueDataProviderServer is the server API for QueueDataProvider service.
// All implementations must embed UnimplementedQueueDataProviderServer
// for forward compatibility.
//
// *
// Service is used to request messages from DB and sent them to specified Queue
type QueueDataProviderServer interface {
	// The messages are return within group batches
	SearchMessageGroups(context.Context, *MessageGroupsQueueSearchRequest) (*MessageLoadedStatistic, error)
	// Requesting events with the specified interval and sends them to queue
	SearchEvents(context.Context, *EventQueueSearchRequest) (*EventLoadedStatistic, error)
	mustEmbedUnimplementedQueueDataProviderServer()
}

// UnimplementedQueueDataProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueueDataProviderServer struct{}

func (UnimplementedQueueDataProviderServer) SearchMessageGroups(context.Context, *MessageGroupsQueueSearchRequest) (*MessageLoadedStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessageGroups not implemented")
}
func (UnimplementedQueueDataProviderServer) SearchEvents(context.Context, *EventQueueSearchRequest) (*EventLoadedStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}
func (UnimplementedQueueDataProviderServer) mustEmbedUnimplementedQueueDataProviderServer() {}
func (UnimplementedQueueDataProviderServer) testEmbeddedByValue()                           {}

// UnsafeQueueDataProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueDataProviderServer will
// result in compilation errors.
type UnsafeQueueDataProviderServer interface {
	mustEmbedUnimplementedQueueDataProviderServer()
}

func RegisterQueueDataProviderServer(s grpc.ServiceRegistrar, srv QueueDataProviderServer) {
	// If the following call pancis, it indicates UnimplementedQueueDataProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueueDataProvider_ServiceDesc, srv)
}

func _QueueDataProvider_SearchMessageGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageGroupsQueueSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueDataProviderServer).SearchMessageGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueDataProvider_SearchMessageGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueDataProviderServer).SearchMessageGroups(ctx, req.(*MessageGroupsQueueSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueDataProvider_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventQueueSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueDataProviderServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueDataProvider_SearchEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueDataProviderServer).SearchEvents(ctx, req.(*EventQueueSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueDataProvider_ServiceDesc is the grpc.ServiceDesc for QueueDataProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueDataProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "th2.data_provider.lw.QueueDataProvider",
	HandlerType: (*QueueDataProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchMessageGroups",
			Handler:    _QueueDataProvider_SearchMessageGroups_Handler,
		},
		{
			MethodName: "SearchEvents",
			Handler:    _QueueDataProvider_SearchEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "th2_grpc_lw_data_provider/queue_data_provider.proto",
}
